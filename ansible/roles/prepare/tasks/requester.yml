---

- name: Copy scripts
  copy:
    src: files/
    dest: "/home/{{ansible_user}}/{{working_dir}}/tools"
    mode: preserve

- name: Parse gen script
  template:
    dest: "/home/{{ansible_user}}/{{working_dir}}/tools/gen_queries.sh"
    src: templates/gen_queries.sh.j2
    mode: 0774

# Do for random queries
- name: Copy server templates
  copy:
    dest: "/home/{{ansible_user}}/{{working_dir}}/{{item}}"
    src: "templates/{{item}}"
  loop:
    - "bind9.conf.j2"
    - "knot2.conf.j2"
    - "nsd4.conf.j2"
    
- name: Append zones to configurations
  command: "python3 ./tools/echoZones.py /home/{{ansible_user}}/{{working_dir}}/data/zones {{item.server}} {{item.file}} ./data/zonelist"
  args:
    chdir: "/home/{{ansible_user}}/{{working_dir}}/"
  loop:
    - { server: 'bind', file: 'bind9.conf.j2'}
    - { server: 'knot', file: 'knot2.conf.j2'}
    - { server: 'nsd', file: 'nsd4.conf.j2'}

- name: Check if random zones are already compressed
  stat:
    path: "/home/{{ansible_user}}/{{working_dir}}/data/zones.tgz"
  register: stat_zones_random_result

- name: Tar random zones
  archive:
    dest: "/home/{{ansible_user}}/{{working_dir}}/data/zones.tgz"
    path: "/home/{{ansible_user}}/{{working_dir}}/data/zones"
  when: not stat_zones_random_result.stat.exists

# Do parsed zones
- name: Copy server templates
  copy:
    dest: "/home/{{ansible_user}}/{{working_dir}}/{{item.dest}}"
    src: "templates/{{item.src}}"
  loop:
    - { src: 'bind9.conf.j2', dest: "bind9r.conf.j2" }
    - { src: 'knot2.conf.j2', dest: "knot2r.conf.j2" }
    - { src: 'nsd4.conf.j2', dest: "nsd4r.conf.j2" }
    
- name: Append zones to configurations
  command: "python3 ./tools/echoZones.py /home/{{ansible_user}}/{{working_dir}}/data/zones {{item.server}} {{item.file}} ./data/parsed_zonelist"
  args:
    chdir: "/home/{{ansible_user}}/{{working_dir}}/"
  loop:
    - { server: 'bind', file: 'bind9r.conf.j2'}
    - { server: 'knot', file: 'knot2r.conf.j2'}
    - { server: 'nsd', file: 'nsd4r.conf.j2'}

- name: Check if zones are already compressed
  stat:
    path: "/home/{{ansible_user}}/{{working_dir}}/data/kvsZones.tgz"
  register: stat_zones_result

- name: Tar zones
  archive:
    dest: "/home/{{ansible_user}}/{{working_dir}}/data/kvsZones.tgz"
    path: "/home/{{ansible_user}}/{{working_dir}}/data/kvsZones"
  when: not stat_zones_result.stat.exists

- name: Recover configuration files
  fetch:
    dest: "buffer/{{item.dest}}"
    src: "/home/{{ansible_user}}/{{working_dir}}/{{item.file}}"
    flat: yes
  loop:
    - { dest: 'bind9.conf.j2', file: "bind9.conf.j2" }
    - { dest: 'knot2.conf.j2', file: "knot2.conf.j2" }
    - { dest: 'nsd4.conf.j2', file: "nsd4.conf.j2" }
    - { dest: 'bind9r.conf.j2', file: "bind9r.conf.j2" }
    - { dest: 'knot2r.conf.j2', file: "knot2r.conf.j2" }
    - { dest: 'nsd4r.conf.j2', file: "nsd4r.conf.j2" }

- name: Recover tar zone files
  fetch:
    dest: "buffer/{{item.dest}}"
    src: "/home/{{ansible_user}}/{{working_dir}}/data/{{item.file}}"
    flat: yes
  loop:
    - { dest: 'kvsZones.tgz', file: "kvsZones.tgz" }
    - { dest: 'zones.tgz', file: "zones.tgz" }

- name: Recover zonelists
  fetch:
    dest: "buffer/{{item}}"
    src: "/home/{{ansible_user}}/{{working_dir}}/data/{{item}}"
    flat: yes
  loop:
    - zonelist
    - parsed_zonelist
    
- name: Create queries for pcap
  command: "../tools/gen_queries.sh {{item.folder}} {{queries}} {{item.output}}"
  args:
    chdir: "/home/{{ansible_user}}/{{working_dir}}/data"
  become: yes
  become_method: sudo
  loop:
    - {folder: "singlezone", output: "randomQueries"}
    - {folder: "kvsZones", output: "scrappedQueries"}

- name: Create PCAP Files
  command: "python3 ./tools/gen_trace.py -c {{myip}} -t {{ips}} -p {{listen_port}} -s {{item.suffix}} -m {{macs}} -a {{mymac}} ./data/{{item.file}}"
  args:
    chdir: "/home/{{ansible_user}}/{{working_dir}}/"
  vars:
    myip: "{{ ansible_default_ipv4['address'] }}"
    mymac: "{{ ansible_default_ipv4['macaddress'] }}"
    ips: "{{server_A}},{{server_B}},{{server_C}}"
  loop:
    - {file: randomQueries, suffix: rand}
    - {file: scrappedQueries, suffix: real}
  register: r
    
- debug: msg="{{item.stdout}}"
  when: "{{item.changed}} == true"
  with_items: "{{r.results}}"